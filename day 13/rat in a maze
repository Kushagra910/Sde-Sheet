
void solve(vector<vector<int>>&maze,vector<vector<int>>&ans,vector<vector<int>>&visited,int x,int y,int n){
    if(x==n-1 && y==n-1){
        vector<int>ds;
        if(maze[n-1][n-1]==1){
            visited[n-1][n-1]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                ds.push_back(visited[i][j]);
            }
        }
        ans.push_back(ds);
        
    }
    visited[x][y]=1;
    if(x-1>=0 && !visited[x-1][y] && maze[x-1][y]==1){
        
        solve(maze,ans,visited,x-1,y,n);
        
    }
    if(x+1<n && !visited[x+1][y] && maze[x+1][y]==1){
        
        solve(maze,ans,visited,x+1,y,n);
        
    }
    if(y-1>=0 && !visited[x][y-1] && maze[x][y-1]==1){
        
        solve(maze,ans,visited,x,y-1,n);
        
    }
    if(y+1<n && !visited[x][y+1] && maze[x][y+1]==1){
       
        solve(maze,ans,visited,x,y+1,n);
        
    }
    visited[x][y]=0;
}
vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
    vector<vector<int>>ans;
    vector<vector<int>>visited(n,vector<int>(n,0));
    if(maze[0][0]==1){
    solve(maze,ans,visited,0,0,n);
    sort(ans.begin(),ans.end());
        return ans;
    }
    else{
        return ans;
    }
}
