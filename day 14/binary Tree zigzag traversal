/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> zigZagTraversal(BinaryTreeNode<int> *root)
{
    // Write your code here!
    vector<int>res;
    if(root==NULL){
        return  res;
    }
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    bool LtoR=true;
    while(!q.empty()){
        int size=q.size();
        vector<int>row(size);
        for(int i=0;i<size;i++){
            BinaryTreeNode<int>* node=q.front();
            q.pop();
            int index=(LtoR?i:size-1-i);
            row[index]=node->data;
            if(node->left!=NULL) q.push(node->left);
            if(node->right!=NULL) q.push(node->right);
        }
        LtoR=!LtoR;
        for(int i=0;i<row.size();i++){
            res.push_back(row[i]);
        }
    }
    return  res;
}
