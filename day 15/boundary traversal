/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>* node){
    if(node->left==NULL && node->right==NULL) return true;
    else return false;
}
void addLeftboundary(TreeNode<int>* root,vector<int>&res){
    TreeNode<int>* curr=root->left;
    while(curr){
        if(!isLeaf(curr)){  
        res.push_back(curr->data);
        }
        if(curr->left) curr=curr->left;
        else curr=curr->right;
    }
}
void addRightboundary(TreeNode<int>*root,vector<int>&res){
    TreeNode<int>* curr=root->right;
    vector<int>temp;
    while(curr){
        if(!isLeaf(curr)){
        temp.push_back(curr->data);
        }
        if(curr->right) curr=curr->right;
        else curr=curr->left;
    }
    for(int i=temp.size()-1;i>=0;--i){
        res.push_back(temp[i]);
    }
}
void addleafnodes(TreeNode<int>* root,vector<int>&res){
    
    if(isLeaf(root)){
        res.push_back(root->data);
        return;
    }
    if(root->left!=NULL) addleafnodes(root->left,res);
    if(root->right!=NULL) addleafnodes(root->right,res);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int>res;
    if(!root) {
        return res;
    }
    if(!isLeaf(root)){
    res.push_back(root->data);
    }
    addLeftboundary(root,res);
    addleafnodes(root,res);
    addRightboundary(root,res);
    return res;
}
