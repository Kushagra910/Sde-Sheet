/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/
#include<bits/stdc++.h>
TreeNode<int>* buildTree(vector<int>&inOrder,int is,int ie,vector<int>&postOrder,int ps,int pe,map<int,int>&inMap){
    if(is>ie || ps>pe) return NULL;
    TreeNode<int>* root=new TreeNode<int>(postOrder[pe]);
    int inRoot=inMap[postOrder[pe]];
    int numsleft=inRoot-is;
    root->left=buildTree(inOrder,is,inRoot-1,postOrder,ps,ps+numsleft-1,inMap);
    root->right=buildTree(inOrder,inRoot+1,ie,postOrder,ps+numsleft,pe-1,inMap);
    return root;
}
TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
	// Write your code here.
    map<int,int>inMap;
    for(int i=0;i<inOrder.size();i++){
        inMap[inOrder[i]]=i;
    }
    TreeNode<int>* root=buildTree(inOrder,0,inOrder.size()-1,postOrder,0,postOrder.size()-1,inMap);
    return root;
}
