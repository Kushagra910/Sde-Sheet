/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
void inorder(BinaryTreeNode<int>* root,vector<int>&in){
    if(!root) return;
    inorder(root->left,in);
    in.push_back(root->data);
    inorder(root->right,in);
}
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    // Write your code here
    if(!root) return false;
    vector<int>in;
    inorder(root,in);
    int s=0;
    int e=in.size()-1;
    while(s<e){
        if(in[s]+in[e]==k) return true;
        else if(in[s]+in[e]<k){
            s++;
        }
        else{
            e--;
        }
    }
    return false;
}
