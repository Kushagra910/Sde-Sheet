#include <bits/stdc++.h> 
int merge(long long *arr,int temp[],int left,int mid,int right){
    int i,j,k;
    int inv_cnt=0;
    i=left;
    j=mid;
    k=left;
    while((i<=mid-1) && (j<=right)){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }
        else{
            temp[k++]=arr[j++];
            inv_cnt+=(mid-i);
        }
    }
    while(i<=mid-1){
        temp[k++]=arr[i++];
    }
    while(j<=right){
        temp[k++]=arr[j++];
    }
    for(i=left;i<=right;i++){
        arr[i]=temp[i];
    }
    return inv_cnt;
}
long long mergesort(long long *arr,int temp[],long long l,long long r){
    long long inv_cnt=0;
    if(l<r){
    long long mid=(l+r)/2;
        inv_cnt+=mergesort(arr,temp,l,mid);
        inv_cnt+=mergesort(arr,temp,mid+1,r);
        inv_cnt+=merge(arr,temp,l,mid+1,r);
    }
    return inv_cnt;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    int temp[n];
    return mergesort(arr,temp,0,n-1);
}
